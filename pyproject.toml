[tool.interrogate]
ignore-init-method = false
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = false
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", "build", ".tox", ".venv", "dist", "site"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
# possible values: 0 (minimal output), 1 (-v), 2 (-vv)
verbose = 2
quiet = false
whitelist-regex = []


[tool.black]
  # How many characters per line to allow.
line-length=120

  # Python versions that should be supported by Black's output
target-version=['py39']

  # A regular expression that matches files and directories that should be
  # included on recursive searches. An empty value means all files are included
  # regardless of the name.  Use forward slashes for directories on all platforms
  # (Windows, too).  Exclusions are calculated first, inclusions later.
include='\.pyi?$'

  # A regular expression that matches files and directories that should be
  # excluded on recursive searches. An empty value means no paths are excluded.
  # Use forward slashes for directories on all platforms (Windows, too).
  # Exclusions are calculated first, inclusions later.
exclude='''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.eggs-info
    | \.git          # root of the project
    | \.tox
    | \.venv
    | \.sha1
    | \.direnv/python_venv
    | \.direnv/.sha1
    | .\venv_format_python
    | python_venv
    | build
    | dist
    | site
    | site.tox
    | format_python
  )/
)
'''

[tool.isort]
  # Tells isort to set the known standard library based on the specified Python
  # version. Default is to assume any Python 3 version could be the target, and use
  # a union of all stdlib modules across versions. If auto is specified, the
  # version of the interpreter used to run isort (currently: 38) will be used.
  # Default:`py3`
  # Files that sort imports should skip over. If you want to skip multiple files
  # you should specify twice: --skip file1 --skip file2.
  # Default: `('.bzr', '.direnv', '.eggs', '.git', '.hg', '.mypy_cache', '.nox',
  # '.pants.d', '.svn', '.tox', '.venv', '_build', 'buck-out', 'build', 'dist',
  # 'node_modules', 'venv')`
skip=['.bzr',
      '.direnv',
      '.eggs',
      '.git',
      '.hg',
      '.mypy_cache',
      '.nox',
      '.pants.d',
      '.svn',
      '.tox',
      '.venv',
      '_build',
      'buck-out',
      'build',
      'dist',
      'node_modules',
      'venv',
      'python_venv']

ensure_newline_before_comments = true

  # Treat project as a git repository and ignore files listed in .gitignore
  # Default: `False`
skip_gitignore=true

  # The max length of an import line (used for wrapping long imports).
  # Default: `79`
line_length=120

  # Multi line output (0-grid, 1-vertical, 2-hanging, 3-vert-hanging, 4-vert-grid,
  # 5-vert-grid-grouped, 6-vert-grid-grouped-no-comma, 7-noqa,
  # 8-vertical-hanging-indent-bracket, 9-vertical-prefix-from-module-import,
  # 10-hanging-indent-with-parentheses).
  # Default: `WrapModes.GRID`
multi_line_output=3

  # Use parentheses for line continuation on length limit instead of slashes.
  # **NOTE**: This is separate from wrap modes, and only affects how individual
  # lines that  are too long get continued, not sections of multiple imports.
  # Default: `False`
use_parentheses=true

  # Includes a trailing comma on multi line imports that include parentheses.
  # Default: `False`
include_trailing_comma=true

  # Force number of from imports (defaults to 2 when passed as CLI flag without
  # value)to be grid wrapped regardless of line length. If 0 is passed in (the
  # global default) only line length is considered.
  # Default: `0`
force_grid_wrap=0

  # Profile
  # Base profile type to use for configuration. Profiles include: black, django,
  # pycharm, google, open_stack, plone, attrs, hug. As well as any shared profiles.
  # Default: ``
profile="black"

  # Add an explicitly defined source path (modules within src paths have their
  # imports automatically categorized as first_party).
  # Default: `()`
src_paths=["pyLandisProgrammer"]

  # Color Output
  # Tells isort to use color in terminal output.
  # Default: `False`
color_output=true


[tool.pydocstyle]
add_ignore = ["D100","D104", "D101","D102","D103"]
convention = "google"

[tool.commitizen]
  # Commitizen tool used to create automatic bump of version
  # and also automatic changelogs

version = "1.2.0"
tag_format = "v$version"
annotated_tag = true
update_changelog_on_bump = false
bump_message = "[VERSION][skip ci] Release $new_version"
name = "cz_customize"
version_files = [
  "setup.py:version"
]

[tool.commitizen.customize]
 # Customize bump and commit templates
message_template = "[{{change_type}}] {% if scope %}[{{scope}}]{% endif %} {{message}}{% if body %}\n\n{{body}}{% endif %}{% if footer %}\n\n{{footer}}{% endif %}"
example = "[FEAT] This feature enable customize through config file"
schema = "[<type>] <body>"
schema_pattern = "\\[(BREAK|FIX|FEAT|REFACT|DOCS|TEST|CHORE|VERSION|BUILD)\\] (.*)"
bump_pattern = "(BREAK|FIX|FEAT|REFACT|DOCS|TEST|CHORE|VERSION|BUILD).*"
bump_map = {"BREAK" = "MAJOR", "FIX" = "PATCH", "FEAT" = "MINOR", "REFACT" = "PATCH", "DOCS" = "PATCH", "TEST" = "PATCH", "CHORE" = "PATCH", "BUILD" = "PATCH"}

[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
choices = [
  {value = "BREAK", name = "BREAK: Breaking changes."},
  {value = "FIX", name = "FIX: a commit of the type fix patches a bug in your codebase."},
  {value = "FEAT", name = "FEAT: a commit of the type feat introduces a new feature to the codebase."},
  {value = "REFACT", name = "REFACT: a commit of the type refact aims to do some refactoring in the code."},
  {value = "DOCS", name = "DOCS: a commit of the type docs aims to add documentation to the branch and scripts."},
  {value = "TEST", name = "TEST: a commit of the type test aims to add test implementation."},
  {value = "CHORE", name = "CHORE: a commit of the type chore represents regular code maintenance."},
  {value = "VERSION", name = "VERSION: incremented only by commitzen."},
  {value = "BUILD", name = "BUILD: Everything related to the build."}
]
message = "Select the type of change you are commiting"

[[tool.commitizen.customize.questions]]
type = "confirm"
name = "scope"
message = "Optional scope"

[[tool.commitizen.customize.questions]]
type = "input"
name = "message"
message = "Body."

[[tool.commitizen.customize.questions]]
type = "confirm"
name = "footer"
message = "Optional footer."

[tool.unimport]
gitignore = true
remove = true
include_star_import = true
ignore_init = true
exclude = '__init__.py'
